library(seqinr)
library(tidyr)
library(ggplot2)
library(dplyr)
# working directory -------------------------------------------------------
this_dir <- dirname(rstudioapi::getSourceEditorContext()%path)
# author: dlueckin
# date: Wed Jun 21 14:37:56 2023
# libraries ---------------------------------------------------------------
library(data.table)
library(stringr)
library(seqinr)
library(tidyr)
library(ggplot2)
library(dplyr)
# working directory -------------------------------------------------------
this_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this_dir)
print(paste0("Setting wd to: \n ", this_dir))
int_df <- fread("interpro_out_full.tsv")
View(int_df)
library(grepl)
install.packages("grepl")
library(grepel)
# author: dlueckin
# date: Wed Jun 21 14:37:56 2023
# libraries ---------------------------------------------------------------
library(data.table)
library(stringr)
library(seqinr)
library(tidyr)
library(ggplot2)
library(dplyr)
library(grep)
# author: dlueckin
# date: Wed Jun 21 14:37:56 2023
# libraries ---------------------------------------------------------------
library(data.table)
library(stringr)
library(seqinr)
library(tidyr)
library(ggplot2)
library(dplyr)
# working directory -------------------------------------------------------
this_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this_dir)
print(paste0("Setting wd to: \n ", this_dir))
# import full df ----------------------------------------------------------
int_df <- fread("interpro_out_full.tsv")
search_terms <- paste(c("cdc6", "replication", "RepA", "primase", "polymerase", "helicase"))
rep_df <- data.table(contig = unique(int_df$contig),
replication_protein = grepl())
rep_df <- data.table(contig = unique(int_df$contig),
replication_protein = "")
i = 1
search_terms <- paste(c("cdc6", "replication", "RepA", "primase", "polymerase", "helicase"), collapse = "|")
int_df %>%
filter(contig == rep_df$contig[i]) %>%
filter(grepl(pattern = search_terms, x = annotation, ignore.case = TRUE))
unique(int_df$contig)
contig <- unique(int_df$contig)[1]
int_df %>%
filter(contig == contig) %>%
filter(grepl(pattern = search_terms, x = annotation, ignore.case = TRUE))
search_terms <- paste(c("cdc6", "replication", "RepA", "primase", "polymerase", "helicase"), collapse = "|")
rep_df <- data.table()
for(acc in unique(int_df$contig)){
tmp_df <- int_df %>%
filter(contig == acc) %>%
filter(grepl(pattern = search_terms, x = annotation, ignore.case = TRUE))
rep_df <- rbind(rep_df, tmp_df)
}
View(rep_df)
fwrite(rep_df, "replication_df.tsv","\t")
fwrite(rep_df, "replication_df.tsv", sep = "\t")
View(int_df)
# author: dlueckin
# date: Wed Jun 21 14:37:56 2023
# libraries ---------------------------------------------------------------
library(data.table)
library(stringr)
library(seqinr)
library(tidyr)
library(ggplot2)
library(dplyr)
# working directory -------------------------------------------------------
this_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this_dir)
print(paste0("Setting wd to: \n ", this_dir))
# import full df ----------------------------------------------------------
int_df <- fread("interpro_out_full.tsv")
# search replication proteins ---------------------------------------------
search_terms <- paste(c("cdc6", "orc1", "replication", "RepA", "primase", "polymerase", "helicase"), collapse = "|")
rep_df <- data.table()
for(acc in unique(int_df$contig)){
tmp_df <- int_df %>%
filter(contig == acc) %>%
filter(grepl(pattern = search_terms, x = annotation, ignore.case = TRUE))
rep_df <- rbind(rep_df, tmp_df)
}
fwrite(rep_df, "replication_df.tsv", sep = "\t")
search_terms <- paste(c("cdc6", "orc1", "replication", "RepA", "primase", "polymerase", "helicase", "jelly roll", "jelly-roll"), collapse = "|")
rep_df <- data.table()
for(acc in unique(int_df$contig)){
tmp_df <- int_df %>%
filter(contig == acc) %>%
filter(grepl(pattern = search_terms, x = annotation, ignore.case = TRUE))
rep_df <- rbind(rep_df, tmp_df)
}
View(rep_df)
int_df %>% filter(contig == "Gairdner_NODE_167_length_41210_cov_9.888325")
a <- int_df %>% filter(contig == "Gairdner_NODE_167_length_41210_cov_9.888325")
a$annotation
fwrite(a, "test.tsv")
# author: dlueckin
# date: Wed Jun 21 11:53:40 2023
# libraries ---------------------------------------------------------------
library(data.table)
library(stringr)
library(seqinr)
library(tidyr)
library(ggplot2)
library(dplyr)
# working directory -------------------------------------------------------
this_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this_dir)
print(paste0("Setting wd to: \n ", this_dir))
# interpro_out <- rbindlist(sapply(list.files("../interpro_out", pattern = , full.names = TRUE), fread))
# read in data ------------------------------------------------------------
interpro_out <- data.table()
for(file in list.files("../interpro_out/", full.names = TRUE)){
tmp_df <- fread(file)
interpro_out <- rbind(interpro_out, tmp_df)
}
# some cosmetics ----------------------------------------------------------
interpro_out <- interpro_out %>%
select(V1, V3, V4, V6, V7, V8, V9)
names(interpro_out) <- c("gene_id", "gene_length", "DB", "annotation", "hit_start", "hit_end", "evalue")
# add contig id
interpro_out$contig <- str_remove(interpro_out$gene_id, ">")
interpro_out$contig <- str_remove(interpro_out$contig, "\\_\\d*$")
# remove "-" and change to numeric
interpro_out[interpro_out$evalue == "-"]$evalue <- 100
interpro_out$evalue <- as.numeric(interpro_out$evalue)
# remove ">"
interpro_out$gene_id <- str_remove(interpro_out$gene_id, ">")
# add orf numbers
interpro_out$orf <- str_extract(interpro_out$gene_id, "\\d*$")
# remove non hits or low scoring hits -------------------------------------
interpro_out <- interpro_out %>%
filter(evalue <= 0.00001) %>%
filter(annotation != "-")
# author: dlueckin
# date: Wed Jun 21 11:53:40 2023
# libraries ---------------------------------------------------------------
library(data.table)
library(stringr)
library(seqinr)
library(tidyr)
library(ggplot2)
library(dplyr)
# working directory -------------------------------------------------------
this_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this_dir)
print(paste0("Setting wd to: \n ", this_dir))
# interpro_out <- rbindlist(sapply(list.files("../interpro_out", pattern = , full.names = TRUE), fread))
# read in data ------------------------------------------------------------
interpro_out <- data.table()
for(file in list.files("../interpro_out/", full.names = TRUE)){
tmp_df <- fread(file)
interpro_out <- rbind(interpro_out, tmp_df)
}
# some cosmetics ----------------------------------------------------------
interpro_out <- interpro_out %>%
select(V1, V3, V4, V6, V7, V8, V9)
names(interpro_out) <- c("gene_id", "gene_length", "DB", "annotation", "hit_start", "hit_end", "evalue")
# add contig id
interpro_out$contig <- str_remove(interpro_out$gene_id, ">")
interpro_out$contig <- str_remove(interpro_out$contig, "\\_\\d*$")
# remove "-" and change to numeric
interpro_out[interpro_out$evalue == "-"]$evalue <- 100
interpro_out$evalue <- as.numeric(interpro_out$evalue)
# remove ">"
interpro_out$gene_id <- str_remove(interpro_out$gene_id, ">")
# add orf numbers
interpro_out$orf <- str_extract(interpro_out$gene_id, "\\d*$")
# remove non hits or low scoring hits -------------------------------------
interpro_out <- interpro_out %>%
filter(evalue <= 0.00001) %>%
filter(annotation != "-")
# read contig_border_df and remove unnceessary annotations ----------------
manual_region_df <- fread("../../E_check_synteny/scripts/manual_region_df.tsv") %>%
filter(comment != "both ends of a fragment")
fwrite(interpro_out, "interpro_out_full.tsv", sep = "\t")
# get only one hit per ORF ------------------------------------------------
interpro_out <- interpro_out %>% group_by(gene_id) %>% slice_min(n = 2, evalue)
# combine this DF with the annotation DF from E_synteny -------------------
gene_df <- fread("../../E_check_synteny/scripts/gene_df.tsv")
gene_df$interpro_annot <- interpro_out$annotation[match(gene_df$id, interpro_out$gene_id)]
gene_df$interpro_evalue <- interpro_out$evalue[match(gene_df$id, interpro_out$gene_id)]
View(gene_df)
View(interpro_out)
View(int_df)
# author: dlueckin
# date: Wed Jun 21 14:37:56 2023
# libraries ---------------------------------------------------------------
library(data.table)
library(stringr)
library(seqinr)
library(tidyr)
library(ggplot2)
library(dplyr)
# working directory -------------------------------------------------------
this_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this_dir)
print(paste0("Setting wd to: \n ", this_dir))
# import full df ----------------------------------------------------------
int_df <- fread("interpro_out_full.tsv")
# search replication proteins ---------------------------------------------
search_terms <- paste(c("cdc6", "orc1", "replication", "RepA", "primase",
"polymerase", "helicase", "jelly roll", "jelly-roll",
"endonuclease", " DNA-binding domain", "DNA binding domain"),
collapse = "|")
rep_df <- data.table()
for(acc in unique(int_df$contig)){
tmp_df <- int_df %>%
filter(contig == acc) %>%
filter(grepl(pattern = search_terms, x = annotation, ignore.case = TRUE))
rep_df <- rbind(rep_df, tmp_df)
}
fwrite(rep_df, "replication_df.tsv", sep = "\t")
View(rep_df)
# author: dlueckin
# date: Wed Jun 21 14:37:56 2023
# libraries ---------------------------------------------------------------
library(data.table)
library(stringr)
library(seqinr)
library(tidyr)
library(ggplot2)
library(dplyr)
# working directory -------------------------------------------------------
this_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this_dir)
print(paste0("Setting wd to: \n ", this_dir))
# import full df ----------------------------------------------------------
int_df <- fread("interpro_out_full.tsv")
# search replication proteins ---------------------------------------------
search_terms <- paste(c("cdc6", "orc1", "replication", "RepA", "primase",
"polymerase", "helicase", "jelly roll", "jelly-roll",
"endonuclease", " DNA-binding domain", "DNA binding domain"),
collapse = "|")
rep_df <- data.table()
for(acc in unique(int_df$contig)){
tmp_df <- int_df %>%
filter(contig == acc) %>%
filter(grepl(pattern = search_terms, x = annotation, ignore.case = TRUE))
rep_df <- rbind(rep_df, tmp_df)
}
fwrite(rep_df, "replication_df.tsv", sep = "\t")
View(int_df)
# author: dlueckin
# date: Wed Jun 21 18:07:05 2023
# libraries ---------------------------------------------------------------
library(data.table)
library(stringr)
library(seqinr)
library(tidyr)
library(ggplot2)
library(dplyr)
# working directory -------------------------------------------------------
this_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this_dir)
print(paste0("Setting wd to: \n ", this_dir))
list.files("01_hmm_results/")
# author: dlueckin
# date: Wed Jun 21 18:07:05 2023
# libraries ---------------------------------------------------------------
library(data.table)
library(stringr)
library(seqinr)
library(tidyr)
library(ggplot2)
library(dplyr)
# working directory -------------------------------------------------------
this_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this_dir)
print(paste0("Setting wd to: \n ", this_dir))
# import hmm results ------------------------------------------------------
hmm_df <- data.table()
for(file in list.files("01_hmm_results/", pattern = "domtblout.txt")){
domtbl <- fread(paste0("01_hmm_results/", file), skip = 3, fill = TRUE) %>%
select(V1, V3, V4, V6, V7, V8, V16, V17) %>%
filter(V1 != "#")
names(domtbl) <- c("hit", "hit_length", "query", "query_length", "evalue", "score", "alignment_start", "alignment_end")
# calc alignment length
domtbl$aln_length <- domtbl$alignment_end - domtbl$alignment_start
# prepare data for later filtering
domtbl$query_length <- as.numeric(domtbl$query_length)
domtbl$score <- as.numeric(domtbl$score)
hmm_df <- rbind(hmm_df, domtbl)
}
hmm_df <- fread("01_hmm_results/combined_res.out")
View(hmm_df)
hmm_df <- fread("01_hmm_results/combined_res.out", header = F)
View(hmm_df)
hmm_df <- fread("01_hmm_results/combined_res.out", header = F, sep = "\t")
View(domtbl)
View(hmm_df)
View(hmm_df)
hmm_df <- fread("01_hmm_results/combined_res.out", header = F, sep = " ")
View(hmm_df)
hmm_df <- fread("01_hmm_results/combined_res.out", header = F, sep = " ")
hmm_df <- fread("01_hmm_results/combined_res.out", header = F, sep = " ", fill = TRUE)
View(hmm_df)
hmm_df <- fread("01_hmm_results/combined_res.out", header = F, sep = " ", fill = TRUE)
View(hmm_df)
glimpse(hmm_df)
hmm_df <- fread("01_hmm_results/combined_res.out", header = F, sep = " ", fill = TRUE) %>%
select(V1, V3, V6, V7)
View(hmm_df)
hmm_df <- fread("01_hmm_results/combined_res.out", header = F)
hmm_df <- fread("01_hmm_results/combined_res.out", header = F)
View(hmm_df)
hmm_df <- fread("01_hmm_results/combined_res.out", header = F, sep ="\t"
hmm_df <- fread("01_hmm_results/combined_res.out", header = F, sep ="\t"
hmm_df <- fread("01_hmm_results/combined_res.out", header = F, sep ="\t")
View(hmm_df)
hmm_df <- fread("01_hmm_results/combined_res.out", header = F, sep =" ")
View(hmm_df)
# author: dlueckin
# date: Wed May 10 14:11:11 2023
# libraries ---------------------------------------------------------------
library(data.table)
library(stringr)
library(seqinr)
library(tidyr)
library(ggplot2)
library(dplyr)
library(reshape2)
# working directory -------------------------------------------------------
this_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this_dir)
print(paste0("Setting wd to: \n ", this_dir))
prot_df <- fread("prot_df.tsv")
View(prot_df)
# author: dlueckin
# date: Wed May 10 14:11:11 2023
# libraries ---------------------------------------------------------------
library(data.table)
library(stringr)
library(seqinr)
library(tidyr)
library(ggplot2)
library(dplyr)
library(reshape2)
# working directory -------------------------------------------------------
this_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this_dir)
print(paste0("Setting wd to: \n ", this_dir))
# import df and spread ----------------------------------------------------
prot_df <- fread("prot_df.tsv")
wide_df <- data.table(organism = unique(prot_df$organism))
prot_df$presence <- 1
# Cast the data to a wide format
wide_df <- dcast(prot_df, organism ~ orf, value.var = "presence", fill = 0)
wide_df[,2:8] <- lapply(wide_df[,2:8], function(x) ifelse(x > 1, 1, x))
wide_df$hits <- rowSums(wide_df[,2:8])
wide_df <- wide_df %>%
arrange(desc(hits)) %>%
filter(hits >= 4)
View(wide_df)
length(unique(prot_df$acc))
prot_df %>% group_by(orf) %>% summarise(length(unique(organism)))
# author: dlueckin
# date: Wed May 10 11:50:29 2023
# libraries ---------------------------------------------------------------
library(data.table)
library(stringr)
library(seqinr)
library(tidyr)
library(ggplot2)
library(dplyr)
library(rentrez)
# working directory -------------------------------------------------------
this_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this_dir)
print(paste0("Setting wd to: \n ", this_dir))
# Specify your email address for the Entrez API
email <- "dom.luecking@gmail.com"
prot_df <- data.table()
list.files("../../A_generate_protein_clusters/FINAL_proteins/", full.names = TRUE)
list.files("../../A_generate_protein_clusters/FINAL_proteins/", full.names = TRUE)[1]
file = list.files("../../A_generate_protein_clusters/FINAL_proteins/", full.names = TRUE)[1]
accs <- unlist(getName(read.fasta(file = file)))
accs <- accs[!accs == "Consensus"]
acc = accs[1]
# Use entrez_summary() to retrieve the summary for the protein accession
summary_result <- entrez_summary(db="protein", id=acc)
summary_result
# author: dlueckin
# date: Wed May 10 11:50:29 2023
# libraries ---------------------------------------------------------------
library(data.table)
library(stringr)
library(seqinr)
library(tidyr)
library(ggplot2)
library(dplyr)
library(rentrez)
# working directory -------------------------------------------------------
this_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this_dir)
print(paste0("Setting wd to: \n ", this_dir))
# Specify your email address for the Entrez API
email <- "dom.luecking@gmail.com"
# function ----------------------------------------------------------------
getOrganism <- function(acc){
# Use tryCatch to handle errors
tryCatch({
# Use entrez_summary() to retrieve the summary for the protein accession
summary_result <- entrez_summary(db="protein", id=acc)
# Sys.sleep(0.2)
# Extract the organism name from the summary_result
org_name <- paste0(summary_result["organism"]$organism, "_", summary_result["organism"]$strain)
# return the organism name
return(org_name)
}, error = function(e) {
# If an error occurs, return "NA"
return(NA)
})
}
prot_df <- data.table()
for(file in list.files("../../A_generate_protein_clusters/FINAL_proteins/", full.names = TRUE)){
accs <- unlist(getName(read.fasta(file = file)))
accs <- accs[!accs == "Consensus"]
organisms <- sapply(accs, getOrganism)
tmp_df <- data.table(acc = accs,
organism = organisms,
orf = str_extract(string = file, pattern = "ORF[^\\.]*"))
prot_df <- rbind(prot_df, tmp_df)
}
old_df <- fread("prot_df.tsv")
View(prot_df)
acc = "AQM75274.1"
# Use entrez_summary() to retrieve the summary for the protein accession
summary_result <- entrez_summary(db="protein", id=acc)
summary_result
summary_result["strain"]$strain
# author: dlueckin
# date: Wed May 10 11:50:29 2023
# libraries ---------------------------------------------------------------
library(data.table)
library(stringr)
library(seqinr)
library(tidyr)
library(ggplot2)
library(dplyr)
library(rentrez)
# working directory -------------------------------------------------------
this_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this_dir)
print(paste0("Setting wd to: \n ", this_dir))
# Specify your email address for the Entrez API
email <- "dom.luecking@gmail.com"
# function ----------------------------------------------------------------
getOrganism <- function(acc){
# Use tryCatch to handle errors
tryCatch({
# Use entrez_summary() to retrieve the summary for the protein accession
summary_result <- entrez_summary(db="protein", id=acc)
# Sys.sleep(0.2)
# Extract the organism name from the summary_result
org_name <- paste0(summary_result["organism"]$organism, "_", summary_result["strain"]$strain)
# return the organism name
return(org_name)
}, error = function(e) {
# If an error occurs, return "NA"
return(NA)
})
}
# load ORF clusters -------------------------------------------------------
prot_df <- data.table()
for(file in list.files("../../A_generate_protein_clusters/FINAL_proteins/", full.names = TRUE)){
accs <- unlist(getName(read.fasta(file = file)))
accs <- accs[!accs == "Consensus"]
organisms <- sapply(accs, getOrganism)
tmp_df <- data.table(acc = accs,
organism = organisms,
orf = str_extract(string = file, pattern = "ORF[^\\.]*"))
prot_df <- rbind(prot_df, tmp_df)
}
View(old_df)
View(prot_df)
prot_df <- fread("prot_df.tsv")
View(prot_df)
prot_df %>% group_by(orf) %>% summarise(length(unique(organism)))
prot_df$acc[prot_df$orf == "ORF6"]
reticulate::repl_python()
import Bio.Entrez as Entrez
yes
reticulate::repl_python()
conda_list()
library(reticulate)
conda_list()
conda_install("Biopython")
py_install("Biopython")
reticulate::repl_python()
# Get the nucleotide ID from the first line of the resulting table
nt_acc = ipg_record.split("\n")[1].split("\t")[2]
reticulate::repl_python()
reticulate::repl_python()
